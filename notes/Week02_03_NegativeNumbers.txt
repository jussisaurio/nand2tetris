As mentioned in Unit 01, leading sign bit not really used.

Instead, 2's complement is used, where the order is reversed for the negative numbers.

0000 0
0001 1
0010 2
0011 3
0100 4
0101 5
0110 6
0111 7

1000 -8
1001 -7
1010 -6
1011 -5
1100 -4
1101 -3
1110 -2
1111 -1

This gives addition and the other operations almost for free. Example:

-2
+
-3

 1110     <- "counting down from the next bit max", ie from 16 (5-bit), 16 - 2 = 14
 +
 1101
 =
11011

discard overflow
1011   <- -5!


-2
+
 3

 1110
 +
 0011
 =
10001

discard overflow
0001 <- 1!



How about computing negation?

in: x, out: -x

Idea: 2^n - x = 1 + (2^n - 1) - x

2^n - 1 in binary is just 111111111....


Example:

Input 4
Output -4

4 = 0100
-4 = 1100

 1111
 0100
=1011      <- just flip the bits to get (2^n - 1) -x (why??)

then add 1

1100  <- -4!




